import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';

import axios from 'axios';
import { popularAnimeUri } from './animeAPI';

interface AnimeField {
    mal_id: number;
    image_url: string;
    title: string;
}

export interface AnimeState {
    value: number;
    popular: AnimeField[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: AnimeState = {
    value: 0,
    popular: [],
    status: 'idle',
};

export const fetchPopularAnimeAsync = createAsyncThunk(
    'anime/fetchPopularAnime',
    async () => {
        const response = await axios.get(popularAnimeUri());
        // The value we return becomes the `fulfilled` action payload
        return response.data.results;
    },
);

export const animeSlice = createSlice({
    name: 'anime',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        increment: (state) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            state.value += 1;
        },
        decrement: (state) => {
            state.value -= 1;
        },
        // Use the PayloadAction type to declare the contents of `action.payload`
        incrementByAmount: (state, action: PayloadAction<number>) => {
            state.value += action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchPopularAnimeAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchPopularAnimeAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.popular = action.payload;
            });
    },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPopular = (state: RootState) => state.anime.popular;

export default animeSlice.reducer;
